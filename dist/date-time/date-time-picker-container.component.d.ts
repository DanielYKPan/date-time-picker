import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { OwlDateTimeIntl } from './date-time-picker-intl.service';
import { OwlCalendarComponent } from './calendar.component';
import { OwlTimerComponent } from './timer.component';
import { DateTimeAdapter } from './adapter/date-time-adapter.class';
import { OwlDateTime, PickerType } from './date-time.class';
import { Observable } from 'rxjs';
export declare class OwlDateTimeContainerComponent<T> implements OnInit, AfterContentInit, AfterViewInit {
    private cdRef;
    private elmRef;
    private pickerIntl;
    private dateTimeAdapter;
    calendar: OwlCalendarComponent<T>;
    timer: OwlTimerComponent<T>;
    picker: OwlDateTime<T>;
    activeSelectedIndex: number;
    private hidePicker$;
    readonly hidePickerStream: Observable<any>;
    private confirmSelected$;
    readonly confirmSelectedStream: Observable<any>;
    private pickerOpened$;
    readonly pickerOpenedStream: Observable<any>;
    private _clamPickerMoment;
    pickerMoment: T;
    readonly pickerType: PickerType;
    readonly cancelLabel: string;
    readonly setLabel: string;
    readonly fromLabel: string;
    readonly toLabel: string;
    readonly fromFormattedValue: string;
    readonly toFormattedValue: string;
    readonly showControlButtons: boolean;
    readonly containerElm: HTMLElement;
    readonly owlDTContainerClass: boolean;
    readonly owlDTPopupContainerClass: boolean;
    readonly owlDTDialogContainerClass: boolean;
    readonly owlDTInlineContainerClass: boolean;
    readonly owlDTContainerDisabledClass: boolean;
    readonly owlDTContainerId: string;
    readonly owlDTContainerAnimation: any;
    constructor(cdRef: ChangeDetectorRef, elmRef: ElementRef, pickerIntl: OwlDateTimeIntl, dateTimeAdapter: DateTimeAdapter<T>);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    handleContainerAnimationDone(event: AnimationEvent): void;
    dateSelected(date: T): void;
    timeSelected(time: T): void;
    onCancelClicked(event: any): void;
    onSetClicked(event: any): void;
    handleClickOnInfoGroup(event: any, index: number): void;
    handleKeydownOnInfoGroup(event: any, next: any, index: number): void;
    private setActiveSelectedIndex;
    private initPicker;
    private dateSelectedInSingleMode;
    private dateSelectedInRangeMode;
    private updateAndCheckCalendarDate;
    private focusPicker;
}
